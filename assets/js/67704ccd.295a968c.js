"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[6713],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=i(n),u=l,k=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:l,r[1]=p;for(var i=2;i<o;i++)r[i]=n[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var a=n(7462),l=(n(7294),n(4137));const o={},r="Selector",p={unversionedId:"selector",id:"selector",title:"Selector",description:"Deployer uses the selector to choose hosts. Each host can have a set of labels.",source:"@site/docs/selector.md",sourceDirName:".",slug:"/selector",permalink:"/docs/7.x/selector",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/docs/selector.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Tasks",permalink:"/docs/7.x/tasks"},next:{title:"CI/CD",permalink:"/docs/7.x/ci-cd"}},s={},i=[{value:"Selector syntax",id:"selector-syntax",level:2},{value:"Using the select() function",id:"using-the-select-function",level:2},{value:"Task selectors",id:"task-selectors",level:2},{value:"Labels in YAML",id:"labels-in-yaml",level:2}],c={toc:i};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"selector"},"Selector"),(0,l.kt)("p",null,"Deployer uses the selector to choose hosts. Each host can have a set of labels.\nLabels are key-value pairs. "),(0,l.kt)("p",null,"For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"stage: production")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"role: web"),". "),(0,l.kt)("p",null,"You can use labels to select hosts. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"dep deploy stage=production"),"\nwill deploy to all hosts with ",(0,l.kt)("inlineCode",{parentName:"p"},"stage: production")," label."),(0,l.kt)("p",null,"Let's define two labels, ",(0,l.kt)("strong",{parentName:"p"},"type")," and ",(0,l.kt)("strong",{parentName:"p"},"env"),", to our hosts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"host('web.example.com')\n    ->setLabels([\n        'type' => 'web',\n        'env' => 'prod',\n    ]);\n\nhost('db.example.com')\n    ->setLabels([\n        'type' => 'db',\n        'env' => 'prod',\n    ]);\n")),(0,l.kt)("p",null,"Now let's define a task to check labels:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task('info', function () {\n    writeln('type:' . get('labels')['type'] . ' env:' . get('labels')['env']);\n});\n")),(0,l.kt)("p",null,"Now we can run this task with a selector:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info env=prod\ntask info\n[web.example.com] type:web env:prod\n[db.example.com] type:db env:prod\n")),(0,l.kt)("p",null,"As you can see, Deployer will run this task on all hosts with the ",(0,l.kt)("inlineCode",{parentName:"p"},"env: prod")," label.\nAnd if we define only the ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," label, Deployer will run this task on the specified host."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"dep info type=web\ntask info\n[web.example.com] type:web env:prod\n")),(0,l.kt)("h2",{id:"selector-syntax"},"Selector syntax"),(0,l.kt)("p",null,"Label syntax is represented by ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Disjunctive_normal_form"},"disjunctive normal form"),"\n(",(0,l.kt)("strong",{parentName:"p"},"OR of ANDs"),")."),(0,l.kt)("p",null,"For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"type=web,env=prod")," is a selector of: ",(0,l.kt)("inlineCode",{parentName:"p"},"type=web")," ",(0,l.kt)("strong",{parentName:"p"},"OR")," ",(0,l.kt)("inlineCode",{parentName:"p"},"env=prod"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info 'type=web,env=prod'\ntask info\n[web.example.com] type:web env:prod\n[db.example.com] type:db env:prod\n")),(0,l.kt)("p",null,"As you can see, both hosts are selected (as both of them have the ",(0,l.kt)("inlineCode",{parentName:"p"},"env: prod")," label)."),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"&")," to define ",(0,l.kt)("strong",{parentName:"p"},"AND"),". For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"type=web & env=prod")," is a selector\nfor hosts with ",(0,l.kt)("inlineCode",{parentName:"p"},"type: web")," ",(0,l.kt)("strong",{parentName:"p"},"AND")," ",(0,l.kt)("inlineCode",{parentName:"p"},"env: prod")," labels."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info 'type=web & env=prod'\ntask info\n[web.example.com] type:web env:prod\n")),(0,l.kt)("p",null,"We can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"!=")," to negate a label. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"type!=web")," is a selector for\nall hosts which do not have a ",(0,l.kt)("inlineCode",{parentName:"p"},"type: web")," label."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info 'type!=web'\ntask info\n[db.example.com] type:db env:prod\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Deployer CLI can take a few selectors as arguments. For example,\n",(0,l.kt)("inlineCode",{parentName:"p"},"dep info type=web env=prod")," is the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"dep info 'type=web,env=prod'"),"."),(0,l.kt)("p",{parentName:"admonition"},"You can install bash autocompletion for Deployer CLI, which will help you to\nwrite selectors. See ",(0,l.kt)("a",{parentName:"p",href:"/docs/7.x/installation"},"installation")," for more.")),(0,l.kt)("p",null,"Deployer also has a few special selectors:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"all")," - select all hosts"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"alias=...")," - select host by alias")),(0,l.kt)("p",null,"If a selector does not contain an ",(0,l.kt)("inlineCode",{parentName:"p"},"=")," sign, Deployer will assume that it is an alias."),(0,l.kt)("p",null,"For example ",(0,l.kt)("inlineCode",{parentName:"p"},"dep info web.example.com")," is the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"dep info alias=web.example.com"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info web.example.com\ntask info\n[web.example.com] type:web env:prod\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info 'web.example.com' 'db.example.com'\n$ # Same as: \n$ dep info 'alias=web.example.com,alias=db.example.com'\n")),(0,l.kt)("h2",{id:"using-the-select-function"},"Using the select() function"),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/7.x/api#select"},"select()")," function to select hosts by selector in your PHP code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task('info', function () {\n    $hosts = select('type=web,env=prod');\n    foreach ($hosts as $host) {\n        writeln('type:' . $host->get('labels')['type'] . ' env:' . $host->get('labels')['env']);\n    }\n});\n")),(0,l.kt)("p",null,"Or you can use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/7.x/api#on"},"on()")," function to run a task on selected hosts."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task('info', function () {\n    on(select('all'), function () {\n        writeln('type:' . get('labels')['type'] . ' env:' . get('labels')['env']);\n    });\n});\n")),(0,l.kt)("h2",{id:"task-selectors"},"Task selectors"),(0,l.kt)("p",null,"To restrict a task to run only on selected hosts, you can use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/7.x/tasks#select"},"select()")," method."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task('info', function () {\n    // ...\n})->select('type=web,env=prod');\n")),(0,l.kt)("h2",{id:"labels-in-yaml"},"Labels in YAML"),(0,l.kt)("p",null,"You can also define labels in a YAML recipe. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"hosts:\n  web.example.com:\n    remote_user: deployer\n    env:\n      environment: production\n    labels:\n      env: prod\n")),(0,l.kt)("p",null,"But make sure to distinguish between the ",(0,l.kt)("inlineCode",{parentName:"p"},"env")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"labels.env")," keys.\n",(0,l.kt)("inlineCode",{parentName:"p"},"env")," is a configuration key, and ",(0,l.kt)("inlineCode",{parentName:"p"},"labels.env")," is a label."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task('info', function () {\n    writeln('env:' . get('env')['environment'] . ' labels.env:' . get('labels')['env']);\n});\n")),(0,l.kt)("p",null,"Will print:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ dep info env=prod\ntask info\n[web.example.com] env:production labels.env:prod\n")))}d.isMDXComponent=!0}}]);