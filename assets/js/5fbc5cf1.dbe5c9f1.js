"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[1207],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),k=l,c=u["".concat(p,".").concat(k)]||u[k]||m[k]||r;return n?a.createElement(c,i(i({ref:t},s),{},{components:n})):a.createElement(c,i({ref:t},s))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),l=(n(7294),n(4137));const r={},i="API Reference",o={unversionedId:"api",id:"api",title:"API Reference",description:"host()",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/7.x/api",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/docs/api.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CLI Usage",permalink:"/docs/7.x/cli"},next:{title:"Avoid PHP-FPM Reloading",permalink:"/docs/7.x/avoid-php-fpm-reloading"}},p={},d=[{value:"host()",id:"host",level:2},{value:"localhost()",id:"localhost",level:2},{value:"currentHost()",id:"currenthost",level:2},{value:"select()",id:"select",level:2},{value:"selectedHosts()",id:"selectedhosts",level:2},{value:"import()",id:"import",level:2},{value:"desc()",id:"desc",level:2},{value:"task()",id:"task",level:2},{value:"before()",id:"before",level:2},{value:"after()",id:"after",level:2},{value:"fail()",id:"fail",level:2},{value:"option()",id:"option",level:2},{value:"cd()",id:"cd",level:2},{value:"within()",id:"within",level:2},{value:"run()",id:"run",level:2},{value:"runLocally()",id:"runlocally",level:2},{value:"test()",id:"test",level:2},{value:"testLocally()",id:"testlocally",level:2},{value:"on()",id:"on",level:2},{value:"invoke()",id:"invoke",level:2},{value:"upload()",id:"upload",level:2},{value:"download()",id:"download",level:2},{value:"info()",id:"info",level:2},{value:"warning()",id:"warning",level:2},{value:"writeln()",id:"writeln",level:2},{value:"parse()",id:"parse",level:2},{value:"set()",id:"set",level:2},{value:"add()",id:"add",level:2},{value:"get()",id:"get",level:2},{value:"has()",id:"has",level:2},{value:"ask()",id:"ask",level:2},{value:"askChoice()",id:"askchoice",level:2},{value:"askConfirmation()",id:"askconfirmation",level:2},{value:"askHiddenResponse()",id:"askhiddenresponse",level:2},{value:"input()",id:"input",level:2},{value:"output()",id:"output",level:2},{value:"commandExist()",id:"commandexist",level:2},{value:"commandSupportsOption()",id:"commandsupportsoption",level:2},{value:"which()",id:"which",level:2},{value:"remoteEnv()",id:"remoteenv",level:2},{value:"error()",id:"error",level:2},{value:"timestamp()",id:"timestamp",level:2},{value:"fetch()",id:"fetch",level:2}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference"},"API Reference"),(0,l.kt)("h2",{id:"host"},"host()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"host(string ...$hostname)\n")),(0,l.kt)("p",null,"Defines a host or hosts."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"host('example.org');\nhost('prod.example.org', 'staging.example.org');\n")),(0,l.kt)("p",null,"Inside task can be used to get ",(0,l.kt)("inlineCode",{parentName:"p"},"Host")," instance of an alias."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task('test', function () {\n    $port = host('example.org')->get('port');\n});\n")),(0,l.kt)("h2",{id:"localhost"},"localhost()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"localhost(string ...$hostnames)\n")),(0,l.kt)("h2",{id:"currenthost"},"currentHost()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"currentHost(): Host\n")),(0,l.kt)("p",null,"Returns current host."),(0,l.kt)("h2",{id:"select"},"select()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"select(string $selector): array\n")),(0,l.kt)("p",null,"Returns hosts based on provided selector."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"on(select('stage=prod, role=db'), function (Host $host) {\n    ...\n});\n")),(0,l.kt)("h2",{id:"selectedhosts"},"selectedHosts()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"selectedHosts(): array\n")),(0,l.kt)("p",null,"Returns array of hosts selected by user via CLI."),(0,l.kt)("h2",{id:"import"},"import()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"import(string $file): void\n")),(0,l.kt)("p",null,"Import other php or yaml recipes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"import('recipe/common.php');\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"import(__DIR__ . '/config/hosts.yaml');\n")),(0,l.kt)("h2",{id:"desc"},"desc()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"desc(?string $title = null): ?string\n")),(0,l.kt)("p",null,"Set task description."),(0,l.kt)("h2",{id:"task"},"task()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"task(string $name, $body = null): Task\n")),(0,l.kt)("p",null,"Define a new task and save to tasks list."),(0,l.kt)("p",null,"Alternatively get a defined task."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of current task.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$body")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"callable():void")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Callable task, array of other tasks names or nothing to get a defined tasks")))),(0,l.kt)("h2",{id:"before"},"before()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"before(string $task, $do)\n")),(0,l.kt)("p",null,"Call that task before specified task runs."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$task")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The task before $that should be run.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$do")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"callable():void")),(0,l.kt)("td",{parentName:"tr",align:null},"The task to be run.")))),(0,l.kt)("h2",{id:"after"},"after()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"after(string $task, $do)\n")),(0,l.kt)("p",null,"Call that task after specified task runs."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$task")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The task after $that should be run.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$do")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"callable():void")),(0,l.kt)("td",{parentName:"tr",align:null},"The task to be run.")))),(0,l.kt)("h2",{id:"fail"},"fail()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"fail(string $task, $do)\n")),(0,l.kt)("p",null,"Setup which task run on failure of $task.\nWhen called multiple times for a task, previous fail() definitions will be overridden."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$task")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The task which need to fail so $that should be run.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$do")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"callable():void")),(0,l.kt)("td",{parentName:"tr",align:null},"The task to be run.")))),(0,l.kt)("h2",{id:"option"},"option()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"option(string $name, $shortcut = null, ?int $mode = null, string $description = '', $default = null): void\n")),(0,l.kt)("p",null,"Add users options."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The option name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$shortcut")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"The shortcuts, can be null, a string of shortcuts delimited by")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$mode")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"The option mode: One of the VALUE_* constants")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$description")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"A description text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"string[]")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"bool")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"The default value (must be null for self::VALUE_NONE)")))),(0,l.kt)("h2",{id:"cd"},"cd()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"cd(string $path): void\n")),(0,l.kt)("p",null,"Change the current working directory."),(0,l.kt)("h2",{id:"within"},"within()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"within(string $path, callable $callback)\n")),(0,l.kt)("p",null,"Execute a callback within a specific directory and revert back to the initial working directory."),(0,l.kt)("h2",{id:"run"},"run()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"run(string $command, ?array $options = [], ?int $timeout = null, ?int $idle_timeout = null, ?string $secret = null, ?array $env = null, ?bool $real_time_output = false, ?bool $no_throw = false): string\n")),(0,l.kt)("p",null,"Executes given command on remote host."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"run('echo hello world');\nrun('cd {{deploy_path}} && git status');\nrun('password %secret%', secret: getenv('CI_SECRET'));\nrun('curl medv.io', timeout: 5);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$path = run('readlink {{deploy_path}}/current');\nrun(\"echo $path\");\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$command")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Command to run on remote host.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$options")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Array of options will override passed named arguments.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Sets the process timeout (max. runtime). The timeout in seconds (default: 300 sec; see {{default_timeout}}, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," to disable).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$idle_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Sets the process idle timeout (max. time since last output) in seconds.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$secret")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Placeholder ",(0,l.kt)("inlineCode",{parentName:"td"},"%secret%")," can be used in command. Placeholder will be replaced with this value and will not appear in any logs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$env")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Array of environment variables: ",(0,l.kt)("inlineCode",{parentName:"td"},"run('echo $KEY', env: ['key' => 'value']);"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$real_time_output")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Print command output in real-time.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$no_throw")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Don't throw an exception of non-zero exit code.")))),(0,l.kt)("h2",{id:"runlocally"},"runLocally()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"runLocally(string $command, ?array $options = [], ?int $timeout = null, ?int $idle_timeout = null, ?string $secret = null, ?array $env = null, ?string $shell = null): string\n")),(0,l.kt)("p",null,"Execute commands on a local machine."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = runLocally('git config user.name');\nrunLocally(\"echo $user\");\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$command")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"Command to run on localhost.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$options")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Array of options will override passed named arguments.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Sets the process timeout (max. runtime). The timeout in seconds (default: 300 sec, ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," to disable).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$idle_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Sets the process idle timeout (max. time since last output) in seconds.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$secret")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Placeholder ",(0,l.kt)("inlineCode",{parentName:"td"},"%secret%")," can be used in command. Placeholder will be replaced with this value and will not appear in any logs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$env")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Array of environment variables: ",(0,l.kt)("inlineCode",{parentName:"td"},"runLocally('echo $KEY', env: ['key' => 'value']);"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$shell")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},"Shell to run in. Default is ",(0,l.kt)("inlineCode",{parentName:"td"},"bash -s"),".")))),(0,l.kt)("h2",{id:"test"},"test()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"test(string $command): bool\n")),(0,l.kt)("p",null,"Run test command.\nExample:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"if (test('[ -d {{release_path}} ]')) {\n...\n}\n")),(0,l.kt)("h2",{id:"testlocally"},"testLocally()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"testLocally(string $command): bool\n")),(0,l.kt)("p",null,"Run test command locally.\nExample:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"testLocally('[ -d {{local_release_path}} ]')\n")),(0,l.kt)("h2",{id:"on"},"on()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"on($hosts, callable $callback): void\n")),(0,l.kt)("p",null,"Iterate other hosts, allowing to call run a func in callback."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"on(select('stage=prod, role=db'), function ($host) {\n    ...\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"on(host('example.org'), function ($host) {\n    ...\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"on(Deployer::get()->hosts, function ($host) {\n    ...\n});\n")),(0,l.kt)("h2",{id:"invoke"},"invoke()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"invoke(string $taskName): void\n")),(0,l.kt)("p",null,"Runs a task."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"invoke('deploy:symlink');\n")),(0,l.kt)("h2",{id:"upload"},"upload()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"upload($source, string $destination, array $config = []): void\n")),(0,l.kt)("p",null,"Upload files or directories to host."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"To upload the ",(0,l.kt)("em",{parentName:"p"},"contents")," of a directory, include a trailing slash (eg ",(0,l.kt)("inlineCode",{parentName:"p"},"upload('build/', '{{release_path}}/public');"),").\nWithout the trailing slash, the build directory itself will be uploaded (resulting in ",(0,l.kt)("inlineCode",{parentName:"p"},"{{release_path}}/public/build"),").")),(0,l.kt)("p",null," The ",(0,l.kt)("inlineCode",{parentName:"p"},"$config")," array supports the following keys:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"flags")," for overriding the default ",(0,l.kt)("inlineCode",{parentName:"li"},"-azP")," passed to the ",(0,l.kt)("inlineCode",{parentName:"li"},"rsync")," command"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options")," with additional flags passed directly to the ",(0,l.kt)("inlineCode",{parentName:"li"},"rsync")," command"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timeout")," for ",(0,l.kt)("inlineCode",{parentName:"li"},"Process::fromShellCommandline()")," (",(0,l.kt)("inlineCode",{parentName:"li"},"null")," by default)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"progress_bar")," to display upload/download progress"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"display_stats")," to display rsync set of statistics")),(0,l.kt)("p",null,"Note: due to the way php escapes command line arguments, list-notation for the rsync ",(0,l.kt)("inlineCode",{parentName:"p"},"--exclude={'file','anotherfile'}")," option will not work.\nA workaround is to add a separate ",(0,l.kt)("inlineCode",{parentName:"p"},"--exclude=file")," argument for each exclude to ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," (also, ",(0,l.kt)("em",{parentName:"p"},"do not")," wrap the filename/filter in quotes).\nAn alternative might be to write the excludes to a temporary file (one per line) and use ",(0,l.kt)("inlineCode",{parentName:"p"},"--exclude-from=temporary_file")," argument instead."),(0,l.kt)("h2",{id:"download"},"download()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"download(string $source, string $destination, array $config = []): void\n")),(0,l.kt)("p",null,"Download file or directory from host"),(0,l.kt)("h2",{id:"info"},"info()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"info(string $message): void\n")),(0,l.kt)("p",null,"Writes an info message."),(0,l.kt)("h2",{id:"warning"},"warning()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"warning(string $message): void\n")),(0,l.kt)("p",null,"Writes an warning message."),(0,l.kt)("h2",{id:"writeln"},"writeln()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"writeln(string $message, int $options = 0): void\n")),(0,l.kt)("p",null,"Writes a message to the output and adds a newline at the end."),(0,l.kt)("h2",{id:"parse"},"parse()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"parse(string $value): string\n")),(0,l.kt)("p",null,"Parse set values."),(0,l.kt)("h2",{id:"set"},"set()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"set(string $name, $value): void\n")),(0,l.kt)("p",null,"Setup configuration option."),(0,l.kt)("h2",{id:"add"},"add()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"add(string $name, array $array): void\n")),(0,l.kt)("p",null,"Merge new config params to existing config array."),(0,l.kt)("h2",{id:"get"},"get()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"get(string $name, $default = null)\n")),(0,l.kt)("p",null,"Get configuration value."),(0,l.kt)("h2",{id:"has"},"has()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"has(string $name): bool\n")),(0,l.kt)("p",null,"Check if there is such configuration option."),(0,l.kt)("h2",{id:"ask"},"ask()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"ask(string $message, ?string $default = null, ?array $autocomplete = null): ?string\n")),(0,l.kt)("h2",{id:"askchoice"},"askChoice()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"askChoice(string $message, array $availableChoices, $default = null, bool $multiselect = false)\n")),(0,l.kt)("h2",{id:"askconfirmation"},"askConfirmation()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"askConfirmation(string $message, bool $default = false): bool\n")),(0,l.kt)("h2",{id:"askhiddenresponse"},"askHiddenResponse()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"askHiddenResponse(string $message): string\n")),(0,l.kt)("h2",{id:"input"},"input()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"input(): InputInterface\n")),(0,l.kt)("h2",{id:"output"},"output()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"output(): OutputInterface\n")),(0,l.kt)("h2",{id:"commandexist"},"commandExist()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"commandExist(string $command): bool\n")),(0,l.kt)("p",null,"Check if command exists"),(0,l.kt)("h2",{id:"commandsupportsoption"},"commandSupportsOption()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"commandSupportsOption(string $command, string $option): bool\n")),(0,l.kt)("h2",{id:"which"},"which()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"which(string $name): string\n")),(0,l.kt)("h2",{id:"remoteenv"},"remoteEnv()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"remoteEnv(): array\n")),(0,l.kt)("p",null,"Returns remote environments variables as an array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$remotePath = remoteEnv()['PATH'];\nrun('echo $PATH', env: ['PATH' => \"/home/user/bin:$remotePath\"]);\n")),(0,l.kt)("h2",{id:"error"},"error()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"error(string $message): Exception\n")),(0,l.kt)("p",null,"Creates a new exception."),(0,l.kt)("h2",{id:"timestamp"},"timestamp()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"timestamp(): string\n")),(0,l.kt)("p",null,"Returns current timestamp in UTC timezone in ISO8601 format."),(0,l.kt)("h2",{id:"fetch"},"fetch()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"fetch(string $url, string $method = 'get', array $headers = [], ?string $body = null, ?array &$info = null, bool $nothrow = false): string\n")),(0,l.kt)("p",null,"Example usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$result = fetch('{{domain}}', info: $info);\nvar_dump($info['http_code'], $result);\n")))}m.isMDXComponent=!0}}]);