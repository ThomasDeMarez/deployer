"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[7088],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=i(t),m=a,y=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return t?r.createElement(y,l(l({ref:n},d),{},{components:t})):r.createElement(y,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=c;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4256:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var r=t(7462),a=(t(7294),t(4137));const o={},l="Deploy strategies",p={unversionedId:"advanced/deploy-strategies",id:"version-6.x/advanced/deploy-strategies",title:"Deploy strategies",description:"Single server",source:"@site/versioned_docs/version-6.x/advanced/deploy-strategies.md",sourceDirName:"advanced",slug:"/advanced/deploy-strategies",permalink:"/docs/6.x/advanced/deploy-strategies",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/versioned_docs/version-6.x/advanced/deploy-strategies.md",tags:[],version:"6.x",frontMatter:{},sidebar:"version-6.x/docs",previous:{title:"Deploy and Git",permalink:"/docs/6.x/advanced/deploy-and-git"},next:{title:"Dealing with IO in parallel mode",permalink:"/docs/6.x/advanced/parallel-io"}},s={},i=[{value:"Single server",id:"single-server",level:3},{value:"Build server",id:"build-server",level:3},{value:"Reuse common recipe",id:"reuse-common-recipe",level:3}],d={toc:i};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-strategies"},"Deploy strategies"),(0,a.kt)("h3",{id:"single-server"},"Single server"),(0,a.kt)("p",null,"In most cases you don't need more than one production server.\nIt's better to build your release files (as cache, js/css bundles) on that machine as well.\nSo your builds don't depend on your local configuration and can be deployed from everywhere.\nBy default Deployer recipes are designed to fullfill these kind of deployments.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"desc('Deploy your project');\ntask('deploy', [\n    'deploy:prepare',\n    'deploy:release',\n    'deploy:update_code',\n    'deploy:shared',\n    'deploy:vendors',\n    'deploy:symlink',\n]);\n")),(0,a.kt)("h3",{id:"build-server"},"Build server"),(0,a.kt)("p",null,"If you have a lot of servers where are you going to deploy your application, or you are going to use a CI server,\nit's better to build your release on one server and then upload files to the application servers."),(0,a.kt)("p",null,"To do that create a ",(0,a.kt)("em",{parentName:"p"},"build")," local task:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('build', function () {\n    run('composer install');\n    run('npm install');\n    run('npm run build');\n    // ...\n})->local();\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note, you can use a simple task definition too"),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('build', '\n    composer install\n    npm install\n    npm run build    \n    ...        \n');\n"))),(0,a.kt)("p",null,"After create an ",(0,a.kt)("em",{parentName:"p"},"upload")," task:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('upload', function () {\n    upload(__DIR__ . \"/\", '{{release_path}}');\n});\n")),(0,a.kt)("p",null,"Next, create release and deploy tasks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('release', [\n    'deploy:prepare',\n    'deploy:release',\n    'upload',\n    'deploy:shared',\n    'deploy:writable',\n    'deploy:symlink',\n]);\n\ntask('deploy', [\n    'build',\n    'release',\n    'cleanup',\n    'success'\n]);\n")),(0,a.kt)("p",null,"Now you can run the ",(0,a.kt)("inlineCode",{parentName:"p"},"dep deploy")," command."),(0,a.kt)("h3",{id:"reuse-common-recipe"},"Reuse common recipe"),(0,a.kt)("p",null,"If you want to reuse some tasks from the common recipe, make sure that you set the ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy_path")," before invoking tasks.\nAll common recipe tasks rely on this parameter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('build', function () {\n    set('deploy_path', __DIR__ . '/.build');\n    invoke('deploy:prepare');\n    invoke('deploy:release');\n    invoke('deploy:update_code');\n    invoke('deploy:vendors');\n    // Add more build steps here\n    invoke('deploy:symlink');\n})->local();\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Make sure that you set ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy_path")," before invoking tasks.")),(0,a.kt)("p",null,"After create an upload task:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('upload', function () {\n    upload(__DIR__ . \"/.build/current/\", '{{release_path}}');\n});\n")),(0,a.kt)("p",null,"This task takes content from the current symlink of ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy_path")," from the build step and then uploads it to the application ",(0,a.kt)("inlineCode",{parentName:"p"},"release_path")," path."))}u.isMDXComponent=!0}}]);