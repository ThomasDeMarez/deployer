"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[8596],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(4137));const o={},l="Getting Started",p={unversionedId:"getting-started",id:"version-6.x/getting-started",title:"Getting Started",description:"First, let's install Deployer. Run the following commands in the terminal:",source:"@site/versioned_docs/version-6.x/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/6.x/getting-started",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/versioned_docs/version-6.x/getting-started.md",tags:[],version:"6.x",frontMatter:{},sidebar:"version-6.x/docs",next:{title:"Installation",permalink:"/docs/6.x/installation"}},i={},s=[],u={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"First, let's ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/installation"},"install Deployer"),". Run the following commands in the terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl -LO https://deployer.org/deployer.phar\nmv deployer.phar /usr/local/bin/dep\nchmod +x /usr/local/bin/dep\n")),(0,a.kt)("p",null,"Now you can use Deployer via the ",(0,a.kt)("inlineCode",{parentName:"p"},"dep")," command.\nOpen up a terminal in your project directory and run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dep init\n")),(0,a.kt)("p",null,"This command will create the ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy.php")," file in the current directory. It is called a ",(0,a.kt)("em",{parentName:"p"},"recipe")," and contains configuration and tasks for deployment.\nBy default all recipes extend the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/deployphp/deployer/blob/master/recipe/common.php"},"common")," recipe. Place your ",(0,a.kt)("em",{parentName:"p"},"deploy.php")," file in root of your project and type ",(0,a.kt)("inlineCode",{parentName:"p"},"dep")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"dep list")," command. You will see a list of all available tasks."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can call ",(0,a.kt)("inlineCode",{parentName:"p"},"dep")," command in any subdirectory of your project.")),(0,a.kt)("p",null,"Defining your task is really simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('test', function () {\n    writeln('Hello world');\n});\n")),(0,a.kt)("p",null,"To run that task, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dep test\n")),(0,a.kt)("p",null,"The output will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u27a4 Executing task test\nHello world\n\u2714 Ok\n")),(0,a.kt)("p",null,"Now let's create a task which will run commands on a remote host. For that we must configure deployer.\nYour newly created ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy.php")," file should contain a ",(0,a.kt)("inlineCode",{parentName:"p"},"host")," declaration like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"host('domain.com')\n    ->stage('production')    \n    ->set('deploy_path', '/var/www/domain.com');\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Also it's possible to declare hosts in a separate yaml file. Find out more about the ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/hosts#inventory-file"},"inventory"),".")),(0,a.kt)("p",null,"You can find out more about host configurations ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/hosts"},"here"),". Now let's define a task which will output a\n",(0,a.kt)("inlineCode",{parentName:"p"},"pwd")," command from the remote host:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('pwd', function () {\n    $result = run('pwd');\n    writeln(\"Current dir: $result\");\n});\n")),(0,a.kt)("p",null,"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"dep pwd"),", and you will get this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u27a4 Executing task pwd\nCurrent dir: /var/www/domain.com\n\u2714 Ok\n")),(0,a.kt)("p",null,"Now let's prepare for our first deploy. You need to configure parameters such as ",(0,a.kt)("inlineCode",{parentName:"p"},"repository"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"shared_files,")," and others:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"set('repository', 'git@domain.com:username/repository.git');\nset('shared_files', [...]);\n")),(0,a.kt)("p",null,"You can return the parameter values in each task using the ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," function.\nAlso you can override each configuration for each host:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"host('domain.com')\n    ...\n    ->set('shared_files', [...]);\n")),(0,a.kt)("p",null,"Read more about ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/configuration"},"configuring")," deploy."),(0,a.kt)("p",null,"Now let's deploy our application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dep deploy\n")),(0,a.kt)("p",null,"To include extra details in the output, you can increase verbosity with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose")," option: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-v"),"  for normal output,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-vv"),"  for more verbose output,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-vvv"),"  for debug.")),(0,a.kt)("p",null,"Deployer will create the following directories on the host:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"releases"),"  contains releases dirs,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shared")," contains shared files and dirs,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"current")," symlink to current release.")),(0,a.kt)("p",null,"Configure your hosts to serve your public directory from ",(0,a.kt)("inlineCode",{parentName:"p"},"current"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note that deployer uses ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Access_control_list"},"ACL")," by default for setting up permissions.\nYou can change this behavior with ",(0,a.kt)("inlineCode",{parentName:"p"},"writable_mode")," config.    ")),(0,a.kt)("p",null,"By default deployer keeps the last 5 releases, but you can increase this number by modifying the associated parameter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"set('keep_releases', 10);\n")),(0,a.kt)("p",null,"If there is an error in the deployment process, or something is wrong with your new release,\nsimply run the following command to rollback to the previous working release:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dep rollback\n")),(0,a.kt)("p",null,"You may want to run some task before/after other tasks. Configuring that is really simple!"),(0,a.kt)("p",null,"Let's reload php-fpm after ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy")," finishes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"task('reload:php-fpm', function () {\n    run('sudo /usr/sbin/service php7-fpm reload');\n});\n\nafter('deploy', 'reload:php-fpm');\n")),(0,a.kt)("p",null,"If you need to connect to the host, Deployer has a shortcut for faster access:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dep ssh\n")),(0,a.kt)("p",null,"This command will connect to selected hosts and cd to ",(0,a.kt)("inlineCode",{parentName:"p"},"current_path"),"."))}c.isMDXComponent=!0}}]);