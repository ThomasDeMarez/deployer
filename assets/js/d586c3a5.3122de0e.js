"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[9451],{4137:(e,t,l)=>{l.d(t,{Zo:()=>d,kt:()=>k});var n=l(7294);function o(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){o(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function i(e,t){if(null==e)return{};var l,n,o=function(e,t){if(null==e)return{};var l,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||(o[l]=e[l]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(o[l]=e[l])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var l=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(l),k=o,m=u["".concat(p,".").concat(k)]||u[k]||c[k]||r;return l?n.createElement(m,a(a({ref:t},d),{},{components:l})):n.createElement(m,a({ref:t},d))}));function k(e,t){var l=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=l.length,a=new Array(r);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<r;s++)a[s]=l[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,l)}u.displayName="MDXCreateElement"},1848:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var n=l(7462),o=(l(7294),l(4137));const r={},a="Flow",i={unversionedId:"flow",id:"version-6.x/flow",title:"Flow",description:"If your recipe is based on the common recipe or one of the framework recipes shipped with Deployer, then you are using one of our default flows.",source:"@site/versioned_docs/version-6.x/flow.md",sourceDirName:".",slug:"/flow",permalink:"/docs/6.x/flow",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/versioned_docs/version-6.x/flow.md",tags:[],version:"6.x",frontMatter:{},sidebar:"version-6.x/docs",previous:{title:"Hosts",permalink:"/docs/6.x/hosts"},next:{title:"Inventory",permalink:"/docs/6.x/inventory"}},p={},s=[{value:"deploy:prepare",id:"deployprepare",level:3},{value:"deploy:lock",id:"deploylock",level:3},{value:"deploy:release",id:"deployrelease",level:3},{value:"deploy:update_code",id:"deployupdate_code",level:3},{value:"deploy:shared",id:"deployshared",level:3},{value:"deploy:writable",id:"deploywritable",level:3},{value:"deploy:vendors",id:"deployvendors",level:3},{value:"deploy:clear_paths",id:"deployclear_paths",level:3},{value:"deploy:symlink",id:"deploysymlink",level:3},{value:"deploy:unlock",id:"deployunlock",level:3},{value:"cleanup",id:"cleanup",level:3},{value:"success",id:"success",level:3}],d={toc:s};function c(e){let{components:t,...l}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flow"},"Flow"),(0,o.kt)("p",null,"If your recipe is based on the ",(0,o.kt)("em",{parentName:"p"},"common")," recipe or one of the framework recipes shipped with Deployer, then you are using one of our default flows.\nEach flow is described as a group of other tasks in the ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy")," name space. A common deploy flow may look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"task('deploy', [\n    'deploy:prepare',\n    'deploy:lock',\n    'deploy:release',\n    'deploy:update_code',\n    'deploy:shared',\n    'deploy:writable',\n    'deploy:vendors',\n    'deploy:clear_paths',\n    'deploy:symlink',\n    'deploy:unlock',\n    'cleanup',\n    'success'\n]);\n")),(0,o.kt)("p",null,"Framework recipes may differ in flow, but the basic structure is the same. You can create your own flow by overriding the ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy")," task, but a better solution is to use the cache.\nFor example, if you want to run some task before you symlink the new release:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"before('deploy:symlink', 'deploy:build');\n")),(0,o.kt)("p",null,"Or, to send notifications after a successful deployment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"after('success', 'notify');\n")),(0,o.kt)("p",null,"The next section provides a short overview of each task. "),(0,o.kt)("h3",{id:"deployprepare"},"deploy:prepare"),(0,o.kt)("p",null,"Preparation for deployment. Checks if ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy_path")," exists, otherwise create it. Also checks for the existence of the following paths:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"releases")," \u2013 in this dir will be stored the releases."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shared")," \u2013 shared files across all releases."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".dep")," \u2013 metadata used by Deployer.")),(0,o.kt)("h3",{id:"deploylock"},"deploy:lock"),(0,o.kt)("p",null,"Locks deployment so only one concurrent deployment can be running. To lock deployment, this task checks for the existence of the  ",(0,o.kt)("inlineCode",{parentName:"p"},".dep/deploy.lock")," file. If the deploy process was cancelled by Ctrl+C, run ",(0,o.kt)("inlineCode",{parentName:"p"},"dep deploy:unlock")," to delete this file. In the event that deployment fails, the ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy:unlock")," task will be triggered automatically. "),(0,o.kt)("h3",{id:"deployrelease"},"deploy:release"),(0,o.kt)("p",null,"Create a new release folder based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"release_name")," config parameter. Also reads ",(0,o.kt)("inlineCode",{parentName:"p"},".dep/releases")," to get a list of releases that were created before. "),(0,o.kt)("p",null,"Also, if in the ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy_path")," there was a previous release symlink, it will be deleted."),(0,o.kt)("h3",{id:"deployupdate_code"},"deploy:update_code"),(0,o.kt)("p",null,"Download a new version of code using Git. If you are using Git version 2.0 and ",(0,o.kt)("inlineCode",{parentName:"p"},"git_cache")," config is turned on, this task will use files from the previous release, so only changed files will be downloaded."),(0,o.kt)("p",null,"Override this task in ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy.php")," to create your own code transfer strategy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"task('deploy:update_code', function () {\n    upload('.', '{{release_path}}');\n});\n")),(0,o.kt)("h3",{id:"deployshared"},"deploy:shared"),(0,o.kt)("p",null,"Creates shared files and directories from the ",(0,o.kt)("inlineCode",{parentName:"p"},"shared")," directory into the ",(0,o.kt)("inlineCode",{parentName:"p"},"release_path"),". You can specify shared directories and files in ",(0,o.kt)("inlineCode",{parentName:"p"},"shared_dirs")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"shared_files")," config parameters. The process is split into the following steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Copy dir from ",(0,o.kt)("inlineCode",{parentName:"li"},"release_path")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"shared")," if doesn't exists,"),(0,o.kt)("li",{parentName:"ul"},"delete dir from ",(0,o.kt)("inlineCode",{parentName:"li"},"release_path"),","),(0,o.kt)("li",{parentName:"ul"},"symlink dir from ",(0,o.kt)("inlineCode",{parentName:"li"},"shared")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"release_path"),".")),(0,o.kt)("p",null,"The same steps are followed for shared files. If your system supports relative symlinks then they will be used, otherwise absolute symlinks wil be used."),(0,o.kt)("h3",{id:"deploywritable"},"deploy:writable"),(0,o.kt)("p",null,"Makes the directories listed in ",(0,o.kt)("inlineCode",{parentName:"p"},"writable_dirs")," writable using ",(0,o.kt)("inlineCode",{parentName:"p"},"acl")," mode (using setfacl command) by default. This task will try to guess http_user name, or you can configure it yourself:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"set('http_user', 'www-data');\n\n// Or only for specified host:\nhost(...)\n    ->set('http_user', 'www-data');\n")),(0,o.kt)("p",null,"Also this task supports other writable modes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"chown"),(0,o.kt)("li",{parentName:"ul"},"chgrp"),(0,o.kt)("li",{parentName:"ul"},"chmod"),(0,o.kt)("li",{parentName:"ul"},"acl")),(0,o.kt)("p",null,"To use one of them add this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"set('writable_mode', 'chmod');\n")),(0,o.kt)("p",null,"To use sudo with writable add this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"set('writable_use_sudo', true);\n")),(0,o.kt)("h3",{id:"deployvendors"},"deploy:vendors"),(0,o.kt)("p",null,"Install composer dependencies. You can configure composer options with the ",(0,o.kt)("inlineCode",{parentName:"p"},"composer_options")," parameter. "),(0,o.kt)("h3",{id:"deployclear_paths"},"deploy:clear_paths"),(0,o.kt)("p",null,"Deletes dirs specified in ",(0,o.kt)("inlineCode",{parentName:"p"},"clear_paths"),". This task can be run with sudo using the ",(0,o.kt)("inlineCode",{parentName:"p"},"clear_use_sudo")," parameter."),(0,o.kt)("h3",{id:"deploysymlink"},"deploy:symlink"),(0,o.kt)("p",null,"Switch the ",(0,o.kt)("inlineCode",{parentName:"p"},"current")," symlink to ",(0,o.kt)("inlineCode",{parentName:"p"},"release_path"),". If target system supports atomic switching for symlinks it will used."),(0,o.kt)("h3",{id:"deployunlock"},"deploy:unlock"),(0,o.kt)("p",null,"Deletes the ",(0,o.kt)("inlineCode",{parentName:"p"},".dep/deploy.lock")," file. You can run this task directly to delete the lock file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"dep deploy:unlock staging\n")),(0,o.kt)("h3",{id:"cleanup"},"cleanup"),(0,o.kt)("p",null,"Clean up old releases using the ",(0,o.kt)("inlineCode",{parentName:"p"},"keep_releases")," option. ",(0,o.kt)("inlineCode",{parentName:"p"},"-1")," is treated as unlimited releases."),(0,o.kt)("h3",{id:"success"},"success"),(0,o.kt)("p",null,"Prints a success message."))}c.isMDXComponent=!0}}]);