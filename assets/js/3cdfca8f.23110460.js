"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[7830],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(k,l(l({ref:t},c),{},{components:n})):o.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6450:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(4137));const a={},l="Basics",i={unversionedId:"basics",id:"basics",title:"Basics",description:"Deployer has two main concepts: hosts and tasks.",source:"@site/docs/basics.md",sourceDirName:".",slug:"/basics",permalink:"/docs/7.x/basics",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/docs/basics.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/7.x/getting-started"},next:{title:"Hosts",permalink:"/docs/7.x/hosts"}},s={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basics"},"Basics"),(0,r.kt)("p",null,"Deployer has two main concepts: ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/hosts"},(0,r.kt)("strong",{parentName:"a"},"hosts"))," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/tasks"},(0,r.kt)("strong",{parentName:"a"},"tasks")),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"recipe")," is a file containing definitions for ",(0,r.kt)("strong",{parentName:"p"},"hosts")," and ",(0,r.kt)("strong",{parentName:"p"},"tasks"),"."),(0,r.kt)("p",null,"Deployer CLI requires two arguments to run: a ",(0,r.kt)("strong",{parentName:"p"},"task")," to run and a ",(0,r.kt)("strong",{parentName:"p"},"selector"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep deploy deployer.org\n  --- ------ ------------\n   |    |         |\n   |    |         `--- Selector\n   |    `------------- Task\n   `------------------ CLI\n")),(0,r.kt)("p",null,"Deployer uses the ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/selector"},"selector")," to choose hosts. Next, it takes the given\ntask, performs some preparation (described later), and executes the task on all\nselected hosts."),(0,r.kt)("p",null,"If a selector is not specified, Deployer will ask you to choose a host from a list.\nIf your recipe contains only one host, Deployer will automatically choose it.\nTo select all hosts, specify a special selector: ",(0,r.kt)("inlineCode",{parentName:"p"},"all"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"dep")," CLI looks for a ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.php")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.yaml")," file in the current directory."),(0,r.kt)("p",null,"Or a recipe can be specified explicitly via ",(0,r.kt)("inlineCode",{parentName:"p"},"-f")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--file")," option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep --file=deploy.php deploy deployer.org\n")),(0,r.kt)("p",null,"Let's write a recipe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// We are going to use functions declared primarily in the Deployer namespace,\n// to simplify the recipe, we will also use the Deployer namespace. Alternatively,\n// you can import individual functions via \"use function\".\nnamespace Deployer;\n\nhost('deployer.org');\n\ntask('my_task', function () {\n    run('whoami');\n});\n")),(0,r.kt)("p",null,"Let's try to run our task on deployer.org."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task\ntask my_task\n$\n")),(0,r.kt)("p",null,"But where is our ",(0,r.kt)("inlineCode",{parentName:"p"},"whoami")," command output? By default, Deployer runs with normal verbosity\nlevel and shows only the names of executed tasks. Let's increase verbosity to verbose, and\nrerun our task."),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"-v")," option to increase verbosity. Read more about ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/cli"},"CLI usage"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task -v\ntask my_task\n[deployer.org] run whoami\n[deployer.org] deployer\n$\n")),(0,r.kt)("p",null,"Now let's add a second host:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"host('deployer.org');\nhost('medv.io');\n")),(0,r.kt)("p",null,"How does Deployer know how to connect to a host? It uses the same ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.ssh/config")," file as\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"ssh")," command. Alternatively, you can specify ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/hosts"},"connection options")," in the recipe."),(0,r.kt)("p",null,"Let's run ",(0,r.kt)("inlineCode",{parentName:"p"},"my_task")," task on both hosts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task -v all\ntask my_task\n[deployer.org] run whoami\n[medv.io] run whoami\n[medv.io] anton\n[deployer.org] deployer\n")),(0,r.kt)("p",null,"Deployer runs a task in parallel on each host. This is why the output is mixed.\nWe can limit it to run only on one host at a time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task -v all --limit 1\ntask my_task\n[deployer.org] run whoami\n[deployer.org] deployer\n[medv.io] run whoami\n[medv.io] deployer\n")),(0,r.kt)("p",null,"It is also possible to specify a ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/tasks#limit"},"limit level")," for each individual task.\nBy specifying the limit level for each task, you can control the degree of parallelism\nfor each part of your deployment process."),(0,r.kt)("p",null,"Each host has a configuration: a list of key-value pairs. Let's define our first\nconfiguration option for both our hosts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"host('deployer.org')\n    ->set('my_config', 'foo');\nhost('medv.io')\n    ->set('my_config', 'bar');\n")),(0,r.kt)("p",null,"In the task we can get the currently executing host using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/api#currenthost"},"currentHost")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"task('my_task', function () {\n    $myConfig = currentHost()->get('my_config');\n    writeln(\"my_config: \" . $myConfig);\n});\n")),(0,r.kt)("p",null,"Or with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/api#get"},"get")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"task('my_task', function () {\n-   $myConfig = currentHost()->get('my_config');\n+   $myConfig = get('my_config');\n    writeln(\"my_config: \" . $myConfig);\n});\n")),(0,r.kt)("p",null,"Or via the ",(0,r.kt)("a",{parentName:"p",href:"/docs/7.x/api#parse"},"parse")," function which replaces the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ ... }}")," brackets\nand their enclosed values with the corresponding configuration option."),(0,r.kt)("p",null,"All functions (writeln, run, runLocally, cd, upload, etc) call the ",(0,r.kt)("strong",{parentName:"p"},"parse")," function\ninternally. So you don't need to call the ",(0,r.kt)("strong",{parentName:"p"},"parse")," function by yourself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"task('my_task', function () {\n-   $myConfig = get('my_config');\n-   writeln(\"my_config: \" . $myConfig);\n+   writeln(\"my_config: {{my_config}}\");\n});\n")),(0,r.kt)("p",null,"Let's try to run our task:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task all\ntask my_task\n[deployer.org] my_config: foo\n[medv.io] my_config: bar\n")),(0,r.kt)("p",null,"Awesome! Each host configuration inherits global configuration. Let's refactor\nour recipe to define one global config option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"set('my_config', 'global');\n\nhost('deployer.org');\nhost('medv.io');\n")),(0,r.kt)("p",null,"The config option ",(0,r.kt)("inlineCode",{parentName:"p"},"my_config")," will be equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," on both hosts."),(0,r.kt)("p",null,"Additionally, the value of a config option can be defined as a callback.\nThis callback is executed upon its first access, and the returned result\nis then stored in the host configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"set('whoami', function () {\n    return run('whoami');\n});\n\ntask('my_task', function () {\n    writeln('Who am I? {{whoami}}');\n});\n")),(0,r.kt)("p",null,"Let's try to run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task all\ntask my_task\n[deployer.org] Who am I? deployer\n[medv.io] Who am I? anton\n")),(0,r.kt)("p",null,"We can use this to create a dynamic configuration which uses information from the current host."),(0,r.kt)("p",null,"Only the first call will trigger the callback execution. All subsequent checks use the previously\nsaved value."),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"set('current_date', function () {\n    return run('date');\n});\n\ntask('my_task', function () {\n    writeln('What time is it? {{current_date}}');\n    run('sleep 5');\n    writeln('What time is it? {{current_date}}');\n});\n")),(0,r.kt)("p",null,"If we run my_task, we will see that ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," is called only once on\n",(0,r.kt)("inlineCode",{parentName:"p"},"{{current_date}}")," access."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task deployer.org -v\ntask my_task\n[deployer.org] run date\n[deployer.org] Wed 03 Nov 2021 01:16:53 PM UTC\n[deployer.org] What time is it? Wed 03 Nov 2021 01:16:53 PM UTC\n[deployer.org] run sleep 5\n[deployer.org] What time is it? Wed 03 Nov 2021 01:16:53 PM UTC\n")),(0,r.kt)("p",null,"We can override a config option via CLI option ",(0,r.kt)("inlineCode",{parentName:"p"},"-o")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ dep my_task deployer.org -v -o current_date=\"I don't know\"\ntask my_task\n[deployer.org] What time is it? I don't know\n[deployer.org] run sleep 5\n[deployer.org] What time is it? I don't know\n")),(0,r.kt)("p",null,"Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"current_date")," config option is overridden there is no need to call the callback.\nSo there is no 'run date'."))}u.isMDXComponent=!0}}]);