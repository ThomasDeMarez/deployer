"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[8390],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const o={},i="Sentry Recipe",l={unversionedId:"contrib/sentry",id:"contrib/sentry",title:"Sentry Recipe",description:"Source",source:"@site/docs/contrib/sentry.md",sourceDirName:"contrib",slug:"/contrib/sentry",permalink:"/docs/7.x/contrib/sentry",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/docs/contrib/sentry.md",tags:[],version:"current",frontMatter:{},sidebar:"contrib",previous:{title:"Rsync Recipe",permalink:"/docs/7.x/contrib/rsync"},next:{title:"Slack Recipe",permalink:"/docs/7.x/contrib/slack"}},s={},p=[{value:"Configuration options",id:"configuration-options",level:3},{value:"Suggested Usage",id:"suggested-usage",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sentry-recipe"},"Sentry Recipe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"require 'contrib/sentry.php';\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/deployphp/deployer/tree/master/contrib/sentry.php"},"Source")),(0,a.kt)("h3",{id:"configuration-options"},"Configuration options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"organization")," ",(0,a.kt)("em",{parentName:"li"},"(required)"),": the slug of the organization the release belongs to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"projects")," ",(0,a.kt)("em",{parentName:"li"},"(required)"),": array of slugs of the projects to create a release for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"token")," ",(0,a.kt)("em",{parentName:"li"},"(required)"),": authentication token. Can be created at ","[https://sentry.io/settings/account/api/auth-tokens/]"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"version")," ",(0,a.kt)("em",{parentName:"li"},"(required)"),' \u2013 a version identifier for this release.\nCan be a version number, a commit hash etc. (Defaults is set to git log -n 1 --format="%h".)'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"version_prefix")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - a string prefixed to version.\nReleases are global per organization so indipentent projects needs to prefix version number with unique string to avoid conflicts"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"environment")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - the environment you\u2019re deploying to. By default framework's environment is used.\nFor example for symfony, ",(0,a.kt)("em",{parentName:"li"},"symfony_env")," configuration is read otherwise defaults to 'prod'."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ref")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," \u2013 an optional commit reference. This is useful if a tagged version has been provided."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"refs")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - array to indicate the start and end commits for each repository included in a release.\nHead commits must include parameters ",(0,a.kt)("em",{parentName:"li"},"repository")," and ",(0,a.kt)("em",{parentName:"li"},"commit"),") (the HEAD sha).\nThey can optionally include ",(0,a.kt)("em",{parentName:"li"},"previousCommit")," (the sha of the HEAD of the previous release),\nwhich should be specified if this is the first time you\u2019ve sent commit data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"commits")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - array commits data to be associated with the release.\nCommits must include parameters ",(0,a.kt)("em",{parentName:"li"},"id")," (the sha of the commit), and can optionally include ",(0,a.kt)("em",{parentName:"li"},"repository"),",\n",(0,a.kt)("em",{parentName:"li"},"message"),", ",(0,a.kt)("em",{parentName:"li"},"author_name"),", ",(0,a.kt)("em",{parentName:"li"},"author_email")," and ",(0,a.kt)("em",{parentName:"li"},"timestamp"),". By default will send all new commits,\nunless it's a first release, then only first 200 will be sent."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"url")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," \u2013 a URL that points to the release. This can be the path to an online interface to the sourcecode for instance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"date_released")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," \u2013 date that indicates when the release went live. If not provided the current time is assumed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"sentry_server")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," \u2013 sentry server (if you host it yourself). defaults to hosted sentry service."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"date_deploy_started")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - date that indicates when the deploy started. Defaults to current time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"date_deploy_finished")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - date that indicates when the deploy ended. If not provided, the current time is used."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"deploy_name")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," - name of the deploy"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"git_version_command")," ",(0,a.kt)("em",{parentName:"li"},"(optional)"),' - the command that retrieves the git version information (Defaults is set to git log -n 1 --format="%h", other options are git describe --tags --abbrev=0)')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"deploy.php\n\nset('sentry', [\n    'organization' => 'exampleorg',\n    'projects' => [\n        'exampleproj'\n    ],\n    'token' => 'd47828...',\n    'version' => '0.0.1',\n\n]);\n")),(0,a.kt)("h3",{id:"suggested-usage"},"Suggested Usage"),(0,a.kt)("p",null,"Since you should only notify Sentry of a successful deployment, the deploy:sentry task should be executed right at the end."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"deploy.php\n\nafter('deploy', 'deploy:sentry');\n")))}c.isMDXComponent=!0}}]);