"use strict";(self.webpackChunkdeployer_docs=self.webpackChunkdeployer_docs||[]).push([[7215],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(4137));const a={},l="CI/CD",i={unversionedId:"ci-cd",id:"ci-cd",title:"CI/CD",description:"GitHub Actions",source:"@site/docs/ci-cd.md",sourceDirName:".",slug:"/ci-cd",permalink:"/docs/7.x/ci-cd",draft:!1,editUrl:"https://github.com/deployphp/deployer/edit/master/docs/ci-cd.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Selector",permalink:"/docs/7.x/selector"},next:{title:"YAML",permalink:"/docs/7.x/yaml"}},p={},c=[{value:"GitHub Actions",id:"github-actions",level:2},{value:"GitLab CI/CD",id:"gitlab-cicd",level:2},{value:"Deployment concurrency",id:"deployment-concurrency",level:3},{value:"Deploy secrets",id:"deploy-secrets",level:3}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cicd"},"CI/CD"),(0,o.kt)("h2",{id:"github-actions"},"GitHub Actions"),(0,o.kt)("p",null,"Use official ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/deployphp/action"},"GitHub Action for Deployer"),"."),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/deploy.yml")," file with following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: deploy\n\non:\n  push:\n    branches: [master]\n\nconcurrency: production_environment\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: "8.1"\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Deploy\n        uses: deployphp/action@v1\n        with:\n          private-key: ${{ secrets.PRIVATE_KEY }}\n          dep: deploy\n')),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"concurrency: production_environment")," is important as it prevents concurrent\ndeploys.")),(0,o.kt)("h2",{id:"gitlab-cicd"},"GitLab CI/CD"),(0,o.kt)("p",null,"Set the following variables in your GitLab project:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SSH_KNOWN_HOSTS"),": Content of ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.ssh/known_hosts")," file.\nThe public SSH keys for a host may be obtained using the utility ",(0,o.kt)("inlineCode",{parentName:"li"},"ssh-keyscan"),".\nFor example: ",(0,o.kt)("inlineCode",{parentName:"li"},"ssh-keyscan deployer.org"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SSH_PRIVATE_KEY"),": Private key for connecting to remote hosts.\nTo generate a private key: ",(0,o.kt)("inlineCode",{parentName:"li"},"ssh-keygen -t ed25519 -C 'gitlab@deployer.org'"),".")),(0,o.kt)("p",null,"Create a .gitlab-ci.yml file with the following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'stages:\n  - deploy\n\ndeploy:\n  stage: deploy\n  image:\n    name: deployphp/deployer:7\n    entrypoint: [""]\n  before_script:\n    - mkdir -p ~/.ssh\n    - eval $(ssh-agent -s)\n    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts\n    - chmod 644 ~/.ssh/known_hosts\n    - echo "$SSH_PRIVATE_KEY" | tr -d \'\\r\' | ssh-add - > /dev/null\n  script:\n    - dep deploy -vvv\n  resource_group: production\n  only:\n    - master\n')),(0,o.kt)("h3",{id:"deployment-concurrency"},"Deployment concurrency"),(0,o.kt)("p",null,"Only one deployment job runs at a time with the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/yaml/index.html#resource_group"},(0,o.kt)("inlineCode",{parentName:"a"},"resource_group")," keyword")," in .gitlab-ci.yml."),(0,o.kt)("p",null,"In addition, you can ensure that older deployment jobs are cancelled automatically when a newer deployment runs by enabling the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/pipelines/settings.html#prevent-outdated-deployment-jobs"},"skip outdated deployment jobs")," feature (enabled by default)."),(0,o.kt)("h3",{id:"deploy-secrets"},"Deploy secrets"),(0,o.kt)("p",null,"It is not recommended to commit secrets to the repository, you could use a GitLab variable to store them instead."),(0,o.kt)("p",null,"Many frameworks use dotenv to store secrets, let's create a GitLab file variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"DOTENV"),", so it can be deployed along with the code."),(0,o.kt)("p",null,"Set up a deployer task to copy secrets to the server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"task('deploy:secrets', function () {\n    upload(getenv('DOTENV'), '{{deploy_path}}/shared/.env');\n});\n")),(0,o.kt)("p",null,"Run the task immediately after updating the code."))}d.isMDXComponent=!0}}]);